/* eslint-disable simple-import-sort/imports */

// NOTE: disable import sorting until the side-effects
// on the tinymce/plugin side-effect imports have
//  been properly tested

import React, { MutableRefObject, useMemo } from 'react';
import { useDomid } from '@hugsmidjan/react/hooks';
import { Editor as TinyMCE, IAllProps } from '@tinymce/tinymce-react';
import type { Editor } from 'tinymce';

import dirtyClean from './dirtyClean-browser';
import { HTMLText } from './types';
import {
  document_base_url,
  convertFileToBlobInfo,
  base64ToBlob,
} from './utils';

import tinymce from 'tinymce/tinymce';
import 'tinymce/themes/silver';
import 'tinymce/icons/default';

import 'tinymce/plugins/advlist';
import 'tinymce/plugins/autolink';
import 'tinymce/plugins/lists';
import 'tinymce/plugins/link';
import 'tinymce/plugins/image';
import 'tinymce/plugins/charmap';
import 'tinymce/plugins/hr';
// import 'tinymce/plugins/preview';
import 'tinymce/plugins/anchor';
import 'tinymce/plugins/searchreplace';
// import 'tinymce/plugins/visualblocks'; // Outline block level elements
import 'tinymce/plugins/code';
// import 'tinymce/plugins/fullscreen';
// import 'tinymce/plugins/insertdatetime';
// import 'tinymce/plugins/media';
import 'tinymce/plugins/table';
import 'tinymce/plugins/paste';
// import 'tinymce/plugins/help';
// import 'tinymce/plugins/template';

// ---------------------------------------------------------------------------

type PastePreProcessEvent = {
  type: 'pastepreprocess';
  wordContent: boolean;
  internal: boolean;
  content: string;
};

// ---------------------------------------------------------------------------

const CONFIG: IAllProps['init'] = {
  skin_url:
    'https://cdnjs.cloudflare.com/ajax/libs/tinymce/5.6.2/skins/ui/oxide',
  inline: true,
  toolbar_persist: true,
  // toolbar_sticky: true,

  plugins: [
    'advlist',
    'autolink',
    'lists',
    'link',
    'image',
    'charmap',
    'hr',
    // 'preview',
    'anchor',
    'searchreplace',
    // 'visualblocks',
    'code',
    // 'fullscreen',
    // 'insertdatetime',
    // 'media',
    'table',
    'paste',
    // 'help',
    // 'template',

    '_onInited_hack_',
  ],

  advlist_number_styles:
    'default,lower-alpha,upper-alpha,lower-roman,upper-roman',

  // https://www.tiny.cloud/docs/configure/editor-appearance/#examplethetinymcedefaultmenuitems
  menubar: false,

  style_formats: [
    {
      title: 'Layout (no border)',
      selector: 'table',
      attributes: { class: 'layout' },
    },
    {
      title: 'List-Layout Table',
      selector: 'table',
      attributes: { class: 'layout layout--list' },
    },
    {
      title: 'Auto-generated List',
      selector: '[data-autogenerated=""]',
      attributes: { 'data-autogenerated': '' },
    },
    {
      title: 'Málsgrein',
      block: 'p',
      attributes: { class: '', style: '' },
    },
    // {
    //   title: 'Heiti/titill skjalsins',
    //   block: 'p',
    //   attributes: { class: 'doc__title', style: 'text-align: center;' },
    // },
    {
      title: 'Grein',
      block: 'h3',
      attributes: { class: 'article__title', style: '' },
    },
    {
      title: 'Undirkafli',
      block: 'h2',
      attributes: { class: 'subchapter__title', style: '' },
    },
    {
      title: 'Kafli',
      block: 'h2',
      attributes: { class: 'chapter__title', style: '' },
    },
    {
      title: 'Hluti',
      block: 'h2',
      attributes: { class: 'section__title', style: '' },
    },
    {
      title: 'Bráðabirgðaákvæði',
      block: 'h3',
      attributes: {
        class: 'article__title article__title--provisional',
        style: '',
      },
    },
    {
      title: 'Inndregin málsgrein',
      block: 'p',
      attributes: { class: 'indented', style: '' },
    },
    // {
    //   title: 'pre',
    //   block: 'pre',
    //   attributes: { class: '' },
    // },
    {
      title: 'Undirritun',
      items: [
        {
          title: 'Dags',
          block: 'p',
          attributes: { class: 'Dags', style: '' },
        },
        {
          title: 'FHUndirskr',
          block: 'p',
          attributes: { class: 'FHUndirskr', style: '' },
        },
        {
          title: 'Undirritun',
          block: 'p',
          attributes: { class: 'Undirritun', style: '' },
        },
      ],
    },
    {
      title: 'Fyrirsagnir',
      items: [
        {
          title: 'Fyrirsögn 2',
          block: 'h2',
          attributes: { class: '', style: '' },
        },
        {
          title: 'Fyrirsögn 3',
          block: 'h3',
          attributes: { class: '', style: '' },
        },
        {
          title: 'Fyrirsögn 4',
          block: 'h4',
          attributes: { class: '', style: '' },
        },
        // {
        //   title: 'Millifyrirsögn 1',
        //   block: 'strong',
        //   attributes: { class: 'Mfyrirsogn1', style: 'text-align: left;' },
        // },
        // {
        //   title: 'Millifyrirsögn 2',
        //   block: 'em',
        //   attributes: { class: 'Mfyrirsogn2', style: 'text-align: left;' },
        // },
      ],
    },
  ],
  // visualblocks_default_state: true,
  end_container_on_empty_block: true,
  style_formats_autohide: true,

  relative_urls: false,
  remove_script_host: true,
  document_base_url,

  image_dimensions: false,
  // automatic_uploads: true,
  images_reuse_filename: true,
  images_upload_credentials: true,
  // images_upload_handler: // set during component mount

  table_class_list: [
    { title: 'Normal', value: '' },
    { title: 'Layout (no border)', value: 'layout' },
    { title: 'List-Layout Table', value: 'layout layout--list' },
  ],
  table_advtab: false,
  table_cell_advtab: false,
  table_row_advtab: false,
  table_resize_bars: false,
  table_header_type: 'sectionCells',
  table_use_colgroups: false, // default
  table_default_attributes: {},
  table_sizing_mode: 'responsive',

  toolbar: `
    undo redo | bold italic link inlineformat | styleselect alignment |
    bullist numlist ${'' /* outdent indent */} |
    table image | insert
  `,

  toolbar_groups: {
    alignment: {
      icon: 'align-left',
      tooltip: 'Alignment',
      items: 'alignleft aligncenter alignright',
    },
    inlineformat: {
      icon: 'format',
      tooltip: 'Inline formats',
      items: 'underline strikethrough superscript subscript | removeformat',
      // + ' | formats',
    },
    insert: {
      icon: 'plus',
      tooltip: 'Other',
      items: 'code charmap hr',
    },
  },

  // https://www.tiny.cloud/docs/plugins/opensource/paste/
  paste_enable_default_filters: false, // disable TinyMCE’s default paste filters
  // paste_block_drop: true, // Prevent the unfiltered content from being introduced
  // paste_merge_formats: true,
  // paste_webkit_styles: 'margin-left',
  // paste_retain_style_properties: 'margin-left',
  // paste_postprocess: (plugin, args) => { args.nodesetAttribute('id', '42'); },
  // paste_word_valid_elements: 'b,strong,i,em,h1,h2',
  // // NOTE: These paste options are NOT needed because changing e.content
  // // inside paste_preprocess implicitly disables/overrides themm.
  // paste_data_images: true,

  setup: (editor) => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const uiRegistry = editor.ui.registry;

    // uiRegistry.addIcon(
    //   'triangleUp',
    //   '<svg height="24" width="24"><path d="M12 0 L24 24 L0 24 Z" /></svg>',
    // );

    // uiRegistry.addGroupToolbarButton('alignment', {
    //   icon: 'align-left',
    //   tooltip: 'Alignment',
    //   items: 'alignleft aligncenter alignright',
    // });
  },
};

// NOTE: This uses function declaration syntax for the plugin to
// pass as a constructor, if/when it's called with a `new` keyword
// See: https://github.com/tinymce/tinymce/commit/4f192166
tinymce.PluginManager.add('_onInited_hack_', function (editor) {
  const uiRegistry = editor.ui.registry;
  editor.settings.contextmenu = Object.keys(
    uiRegistry.getAll().contextMenus,
  ).join(' ');
});

// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------

export type EditorFileUploader = Exclude<
  typeof CONFIG.images_upload_handler,
  undefined
>;

export type EditorFrameClasses = {
  toolbar: string;
  editor: string;
};

export type EditorFrameProps = {
  config?: IAllProps['init'];
  initialValue: string;
  onReady: (content: HTMLText, editor: Editor) => void;
  onChange: (content: HTMLText) => void;
  onFocus?: () => void;
  onBlur?: () => void;
  disabled?: boolean;
  uploadUrl?: string;
  containerRef: MutableRefObject<HTMLElement | undefined>;
  fileUploader: EditorFileUploader;
  classes: EditorFrameClasses;
  'aria-labelledby'?: string;
  'aria-describedBy'?: string;
};

export const EditorFrame = (props: EditorFrameProps) => {
  const { onBlur, onFocus } = props;
  const s = props.classes;
  const domid = 'toolbar' + useDomid();

  const handlePaste = (plugin: unknown, e: PastePreProcessEvent) => {
    if (e.internal) {
      return;
    }

    // Capture the original content
    let originalContent = e.content;

    // Clear the content to prevent the default paste action
    e.content = '';

    // Clean the content
    const isInlineSnippet =
      !/<(?:p|div|ul|ol|li|table|tbody|thead|caption|tfoot|tr|td|th|blockquote|section|h[1-6])[ >]/i.test(
        originalContent,
      );
    originalContent = dirtyClean(originalContent as HTMLText);
    if (isInlineSnippet) {
      originalContent = originalContent
        .replace(/^<p>/, '')
        .replace(/<\/p>$/, '');
    } else {
      let content = originalContent;
      if (!/article__title/.test(content)) {
        content = content.replace(
          /<p>(\d+\.\s+gr\.(\s+)?)(<br\s+?\/>)?/g,
          '<h3 class="article__title">$1</h3><p>',
        );
      }
      originalContent = content;
    }

    if (originalContent.includes('data:image/')) {
      const imgTagRegex =
        /<img.*?src=["'](data:image\/(png|jpeg|svg\+xml);base64,.*?)["'].*?>/g;
      let match;
      const images: Array<{
        base64: string;
        match: string;
        placeholder: string;
      }> = [];
      let contentWithPlaceholders = originalContent;

      // Collect all base64 images from the content
      while ((match = imgTagRegex.exec(originalContent)) !== null && match[1]) {
        const placeholder = `__IMAGE_PLACEHOLDER_${images.length}__`;
        images.push({ base64: match[1], match: match[0], placeholder });
        contentWithPlaceholders = contentWithPlaceholders.replace(
          match[0],
          placeholder,
        );
      }

      if (images.length > 0) {
        let imagesProcessed = 0;
        images.forEach(({ base64, placeholder }, index) => {
          const { file, filename } = base64ToBlob(base64 ?? '');
          if (file) {
            const blobInfo = convertFileToBlobInfo(file);
            props.fileUploader(
              blobInfo,
              (url: string) => {
                // Replace the placeholder with the uploaded image URL
                contentWithPlaceholders = contentWithPlaceholders.replace(
                  placeholder,
                  `<img src="${url}" alt="${filename}" />`,
                );

                imagesProcessed++;
                // Insert the content once all images are processed
                if (imagesProcessed === images.length) {
                  tinymce.activeEditor.insertContent(contentWithPlaceholders);
                }
              },
              (error: string) => {
                console.error('Image upload failed:', error);
                // Replace the placeholder with a failure message or icon
                contentWithPlaceholders = contentWithPlaceholders.replace(
                  placeholder,
                  `<span class="image-upload-failed">[Image upload failed]</span>`,
                );

                imagesProcessed++;
                // Insert the content once all images are processed or failed
                if (imagesProcessed === images.length) {
                  tinymce.activeEditor.insertContent(contentWithPlaceholders);
                }
              },
            );
          }
        });
      }
    } else {
      // Append the new content directly if there are no images
      tinymce.activeEditor.insertContent(originalContent);
    }
  };

  const currentConfig = props.config ? { ...CONFIG, ...props.config } : CONFIG;

  const config: typeof CONFIG = useMemo(() => {
    return {
      ...currentConfig,
      // react useId creates :XX: id's which causes invalid querySelector errors. Need to escape the ":"
      fixed_toolbar_container: ('#' + domid).replace(/:/g, '\\:'),
      // images_upload_url,
      file_picker_types: 'file',
      file_picker_callback: (callback) => {
        const input = document.createElement('input');
        input.setAttribute('type', 'file');
        input.setAttribute('accept', 'application/pdf'); // Allow only PDFs

        input.onchange = async () => {
          const file = input.files ? input.files[0] : null;
          if (!file) {
            return;
          }

          const reader = new FileReader();
          reader.onload = async () => {
            const blobInfo = convertFileToBlobInfo(file, reader);
            props.fileUploader(
              blobInfo,
              (fileUrl: string) => {
                callback(fileUrl, { text: file.name });
              },
              (error: string) => {
                console.error('Upload error:', error);
              },
            );
          };

          reader.readAsDataURL(file);
        };

        input.click();
      },
      images_upload_handler: props.fileUploader,
      paste_preprocess: handlePaste,
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [domid, props.fileUploader]);

  return (
    <>
      <div className={s.toolbar} id={domid} />
      <TinyMCE
        initialValue={props.initialValue}
        onInit={(event, editor) => {
          const retry = setInterval(() => {
            const contentAreaContainer = editor.getContentAreaContainer();
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (contentAreaContainer) {
              const labelledBy = props['aria-labelledby'];
              const describedBy = props['aria-describedBy'];
              labelledBy &&
                contentAreaContainer.setAttribute(
                  'aria-labelledby',
                  labelledBy,
                );
              describedBy &&
                contentAreaContainer.setAttribute(
                  'aria-describedby',
                  describedBy,
                );
              contentAreaContainer.classList.add(s.editor);
              props.containerRef.current = contentAreaContainer;
              const editorizedText = editor.getContent() as HTMLText;
              props.onReady(editorizedText, editor);
              clearInterval(retry);
            }
          }, 67);
        }}
        onFocus={onFocus && (() => onFocus())}
        onBlur={onBlur && (() => onBlur())}
        onEditorChange={(content) => {
          props.onChange(content as HTMLText);
        }}
        init={{
          ...config,
        }}
        disabled={props.disabled}
      />
    </>
  );
};
